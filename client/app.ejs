<script type="module">
import { createApp } from "vue";

async function apiCall(url, payload, method = "POST") {
  try {
    const response = await fetch(url, {
      method: method,
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });
    return await response.json();
    // if (response.ok) {
    //   return json;
    // } else {
    //   console.log("API CALL: !response.ok", json);
    // }
  } catch (error) {
    console.log("API CALL ERROR: ", error);
    return error;
    //throw new Error(error.message);
  }
}

createApp({
  data() {
    return {
      // flags for UI popovers
      ui: {
        showAddShiftPopover: false,
        showAssignPopover: false,
        showAssignMini: false,
        showMovePopover: false,
        showReassignPopover: false,
      },
      // variables for form control with v-model
      forms: {
        addShift: {
          provider: "",
          shift: "",
        },
        assign: {
          shiftId: "",
          type: "",
          room: "",
        },
        assignTypes: [
          { type: "walkin", icon: "./icons/walkin.svg", tip: "walk in" },
          { type: "ambo", icon: "./icons/ambo.svg", tip: "ambo" },
          { type: "ft", icon: "./icons/ft.svg", tip: "fast track" },
          { type: "bonus", icon: "./icons/bonus.svg", tip: "bonus" },
        ],
      },
      // the board from server, this is initialization version
      board: { zones: { rotation: [], fasttrack: [], flex: [], off: []}, shifts: [], events: [], next: {} },
      // just some helper constants
      providers: providers, // linked in home.ejs
      shiftDetails: shiftDetails, // linked in home.ejs

      rooms: [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16",
        "17",
        "18",
        "19",
        "20",
        "21",
        "22",
        "23",
        "24",
        "25",
        "27",
        "28",
        "29",
        "30",
        "T.A",
        "T.B",
        "T.C",
        "H.A",
        "H.B",
        "H.C",
        "H.D",
        "H.E",
        "H.F",
        "Other",
      ],
    };
  },
  methods: {
    // HELPERS
    findShiftById(shiftId) {
      return this.board.shifts.find((shift) => shift.id === shiftId);
    },

    findShiftsForZone(zoneName) {
      return this.board.zones[zoneName].map(id=>{return {...this.findShiftById(id), zone: zoneName}});
    },

    getShiftsSortedByDoc() {
      return this.board.shifts.toSorted((a, b) => {
        const nameA = a.provider.last.toUpperCase();
        const nameB = b.provider.last.toUpperCase();
        return nameA < nameB ? -1 : nameA > nameB ? 1 : 0;
      });
    },

    numberOfDocsOnRotation() {
      return this.board.zones.rotation.filter((id) => this.findShiftById(id).app !== true)
      .length;
    },

    // SERVER
    async checkLoginStatus() {
      console.log("Checking login status");
      const res = await apiCall("checklogin");
      if (res.status === "success" && res.payload) {
        //this.user = { loggedIn: true, ...res.payload };
        this.nurse = res.payload.username === "nurse" ? true : false;
      }
      if (res.status === "error") {
        this.setError(res);
      }
    },

    handleNewState(state) {
      this.board = state;
    },

    // API Calls
    addShift() {
      const f = this.forms.addShift;
      apiCall("api/addShift", {
        provider: f.provider,
        options: { ...f.shift },
      });
      this.toggleAddShiftPopover();
    },

    addShiftComplete() {
      return Object.values(this.forms.addShift).every(Boolean);
    },

    moveShift(shiftId, offset) {
      apiCall("api/moveShift", { shiftId, offset });
    },

    signOut(shiftId) {
      const shift = this.findShiftById(shiftId);
      if (!shift.app && this.numberOfDocsOnRotation() < 2) {
        alert('There must be at least one doctor on rotation');
        return;
      }
      apiCall("api/signOut", { shiftId });
    },

    signOn(shiftId) {
      apiCall("api/signOn", { shiftId });
    },

    appFlexOn(shiftId) {
      apiCall("api/appFlexOn", { shiftId });
    },

    appFlexOff(shiftId) {
      apiCall("api/appFlexOff", { shiftId });
    },

    joinFT(shiftId) {
      apiCall("api/joinFT", { shiftId });
    },

    leaveFT(shiftId) {
      apiCall("api/leaveFT", { shiftId });
    },

    moveNext(cycle, offset) {
      apiCall("api/moveNext", { cycle, offset });
    },

    assignPatient(shiftId) {
      this.forms.assign.shiftId = shiftId;
      apiCall("api/assignPatient", this.forms.assign);
      this.toggleAssign(shiftId);
    },

    assignPatientFasttrack(shiftId) {
      this.forms.assign.shiftId = shiftId;
      this.forms.assign.type = 'ft';
      apiCall("api/assignPatient", {...this.forms.assign, movePointer: false });
      this.toggleAssign(shiftId);
    },

    assignPatientMini(shiftId) {
      this.forms.assign.shiftId = shiftId;
      apiCall("api/assignPatient", {...this.forms.assign, movePointer: false });
      this.toggleAssignMini(shiftId);
    },

    assignPatientComplete() {
      return !!this.forms.assign.type && !!this.forms.assign.room;
    },

    reassign(eventId, shiftId) {
      apiCall("api/reassign", { eventId, shiftId });
      this.toggleReassignPopover(eventId);
    },

    staffMidlevel(rotationId, shiftId) {
      apiCall("api/staffMidlevel", { rotationId, shiftId});
    },

    undo() {
      apiCall("api/undo");
    },

    // POPOVERS & UI
    closeDropdown(event) {
      event.target.closest("details").removeAttribute("open");
    },

    uiTogglerByShift(flag, shiftId) {
      this.ui[flag] = !this.ui[flag] ? shiftId : false;
    },

    // utility to reset the modeled form data
    formDataReset(form) {
      Object.keys(form).forEach((key) => {
        form[key] = "";
      });
    },

    toggleAddShiftPopover() {
      this.ui.showAddShiftPopover = !this.ui.showAddShiftPopover;
      this.formDataReset(this.forms.addShift);
    },

    toggleAssign(shiftId) {
      this.uiTogglerByShift("showAssignPopover", shiftId);
      this.formDataReset(this.forms.assign);
    },

    assignPopoverOpen(shiftId) {
      return shiftId === this.ui.showAssignPopover;
    },

    toggleAssignMini(shiftId) {
      this.uiTogglerByShift("showAssignMini", shiftId);
      this.formDataReset(this.forms.assign);
    },

    assignMiniOpen(shiftId) {
      return shiftId === this.ui.showAssignMini;
    },

    toggleMovePopover(shiftId) {
      this.uiTogglerByShift("showMovePopover", shiftId);
    },

    movePopoverOpen(shiftId) {
      return shiftId === this.ui.showMovePopover;
    },

    toggleReassignPopover(eventId) {
      this.uiTogglerByShift("showReassignPopover", eventId);
    },

    reassignPopoverOpen(eventId) {
      return eventId === this.ui.showReassignPopover;
    },

    // SHIFT
    isNext(shiftId) {
      return this.board.next.patient === shiftId;
    },

    isFT(shiftId) {
      return this.board.zones.fasttrack.includes(shiftId);
    },

    showAssignButton(shift) {
      return  shift.zone === 'fasttrack' || this.isNext(shift.id);
    },

    isNextMidlevel(shiftId) {
      return this.board.next.sup === shiftId;
    },  

    getShiftClasses(shift) {
      const shiftType = {
        off: "shiftOff",
        fasttrack: "shiftFasttrack",
        rotation: "shiftMain",
        flex: "shiftFlex"
      };
      const next = this.isNext(shift.id) ? "shiftNext" : "";

      return `${shiftType[shift.zone]} ${next}`;
    },
  },

  mounted() {
    this.checkLoginStatus();
    const socket = io();
    socket.on("connect", () => {
      console.log("Socket connected");
    });
    socket.on("new state", (state) => {
      console.log("New state received");
      this.handleNewState(state);
    });
  },
}).mount("#app");
</script>
