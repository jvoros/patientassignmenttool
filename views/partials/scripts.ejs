<script src="/socket.io/socket.io.js"></script>
<script type="module">
import { createApp } from 'https://unpkg.com/petite-vue?module';

createApp({
    state: null,
    newShift: '',
    newDoctor: '',
    newInitials: '',
    resetBoardFlag: false,
    decrementToolFlag: false,
    loaders: [],
    ptTypes: ['fasttrack', 'pit', 'biscuit'],
    ptTypesAdmin: ['patient', 'fasttrack', 'pit', 'biscuit'],

    // interface flags and methods
    resetLoaders() {
        this.loaders = [];
    },
    isNext(id) { 
        return this.state.pointer == id 
    },
    resetBoardFlagToggle() {
        this.resetBoardFlag = !this.resetBoardFlag;
    },
    sixamAlert() {
        this.newShift = null;
    },
    decrementFlagToggle() {
        this.decrementToolFlag = !this.decrementToolFlag
    },

    handleState(state) {
        this.resetLoaders();
        this.newInitials = '';
        this.newDoctor = '';
        this.newShift = '';
        this.resetBoardFlag = false;
        this.state = state;
    },

    // database transmission methods
    //utility state handler, promise style async
    apifetch(url, method = 'POST') {
        return fetch(url, { method: method })
            .then(res => res.ok)
            .catch(err => {
                console.error('Error: ', err);
            });
    },

    joinrotation(loader) {
        if (this.newShift == '') return;
        this.loaders.push('join');
        this.apifetch('/api/join/'+this.newDoctor+'/shift/'+this.newShift+'/pointer/'+this.state.pointer);
    },
 
    goOffRotation(id, status = 2, loader = 'on') {
        this.loaders.push(loader);
        this.apifetch('/api/gooffrotation/'+id+'/'+status);
    },

    changeShiftStatus(id, status_id, loader) {
        this.loaders.push(loader);
        this.apifetch('/api/changestatus/'+id+'/status'+status_id);
    },

   rejoin(id) {
        this.loaders.push('off');
        this.apifetch('/api/rejoin/'+id);
    },

    move(dir, id) {
        if (dir == 'up' && id == 0) return;
        if (dir == 'down' && id == this.state.shifts.on_rotation.length-1) return;
        this.loaders.push('on');
        this.apifetch(`/api/move/${dir}/${id}`);
    },

    assign() {
        if (!this.newInitials) return;
        this.loaders.push('on');
        this.apifetch('/api/assignpatient/'+this.newInitials);
    },

    skip() {
        this.apifetch('/api/skip');
    },

    increment(type, id) {
        this.apifetch('/api/increment/'+type+'/shift/'+id);
    },

    decrement(type, id) {
        this.apifetch('/api/decrement/'+type+'/shift/'+id);
    },

    changeShiftStart(event, shift_id) {
        this.loaders.push('on');
        this.apifetch('/api/changeshiftdetails/'+event.target.value+'/'+shift_id);
    },

    resetBoard() {
        this.loaders.push('reset');
        this.apifetch('/api/resetboard');
    },

    resetTimeline() {
        this.loaders.push('reset');
        this.apifetch('/api/resettimeline');
    },

    async mounted() {
        const socket = io();
        socket.on('connect', () => {
            
            // establish sockets to listen
            socket.on('new state', (state) => {
                console.log('new state...', state);
                this.handleState(state);
            });

            // fire off first event after socket set up
            this.apifetch('/api', 'GET');
        });
    }
}).mount();

</script>
