<script src="/socket.io/socket.io.js"></script>
<script type="module">
import { createApp } from 'https://unpkg.com/petite-vue?module';

createApp({
  state: null,
  error: '',
  newShift: '',
  newDoctor: '',
  newInitials: '',
  resetBoardFlag: false,
  decrementToolFlag: false,
  loginbar: false,
  adminbar: false,
  loaders: [],
  ptTypes: ['fasttrack'],
  ptTypesAdmin: ['patient', 'fasttrack'],
  assign_type: 'walk',
  assign_room: '',
  assign_doc: '',
  rooms: [
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
    '9',
    '10',
    '11',
    '12',
    '13',
    '14',
    '15',
    '16',
    '17',
    '18',
    '19',
    '20',
    '21',
    '22',
    '23',
    '24',
    '25',
    '_',
    '27',
    '28',
    '29',
    '30',
    'T.A',
    'T.B',
    'T.C',
    'H.A',
    'H.B',
    'H.C',
    'H.D',
    'H.E',
    'H.F',
    'Other'
  ],

  // interface flags and methods
  resetLoaders() {
    this.loaders = [];
  },
  isNext(id) { 
    return this.state.pointer == id 
  },
  resetBoardFlagToggle() {
    this.resetBoardFlag = !this.resetBoardFlag;
  },
  sixamAlert() {
    this.newShift = 1;
  },
  decrementFlagToggle() {
    this.decrementToolFlag = !this.decrementToolFlag
  },
  dismissError() {
    this.error = '';
  },
  toggleLoginbar() {
    this.loginbar = !this.loginbar;
  },
  toggleAdminTools() {
    this.adminbar = !this.adminbar;
  },

  getAssignDoc() {
    if (this.assign_type == 'fasttrack' &&  this.state.shifts.ft_rotation.length > 0) {
      this.assign_doc = this.state.shifts.ft_rotation[0].doctor;
    } else {
      this.assign_doc = this.state.shifts.on_rotation[this.state.pointer].doctor;
    }

  },

  handleState(state) {
    this.resetLoaders();
    this.newInitials = '';
    this.newDoctor = '';
    this.newShift = '';
    this.resetBoardFlag = false;
    this.state = state;
    this.assign_doc = state.shifts.on_rotation.length == 0 ? '' : state.shifts.on_rotation[state.pointer].doctor;
  },

  // database transmission methods
  //utility state handler, promise style async
  async apifetch(url, method = 'POST') {
    try {
      const response = await fetch(url, { method: method });
      if (!response.ok) {
        const error = await response.json();
        console.log(error);
        this.error = error;
      } else {
        return response.json();
      }
    }
    catch(err) {
      const msg = 'Fetch API error';
      const error = { id: Date.now().toString(36) + Math.random().toString(36).substring(2), message: msg };
      console.error(error);
    } 
  },

  joinrotation(loader) {
    if (this.newShift == '') return;
    this.loaders.push('on');
    this.toggleLoginbar();
    this.apifetch('/api/join/'+this.newDoctor+'/shift/'+this.newShift+'/pointer/'+this.state.pointer);
  },
 
  goOffRotation(id, status = 2, loader = 'on') {
    this.loaders.push(loader);
    this.apifetch('/api/gooffrotation/'+id+'/'+status);
  },

  changeShiftStatus(id, status_id, loader) {
    this.loaders.push(loader);
    this.apifetch('/api/changestatus/'+id+'/status'+status_id);
  },

  rejoin(id) {
    this.loaders.push('off');
    this.apifetch('/api/rejoin/'+id);
  },

  move(dir, id) {
    if (dir == 'up' && id == 0) return;
    if (dir == 'down' && id == this.state.shifts.on_rotation.length-1) return;
    this.loaders.push('on');
    this.apifetch(`/api/move/${dir}/${id}`);
  },

  assign() {
    if (!this.newInitials) return;
    this.loaders.push('on');
    this.apifetch('/api/assignpatient/'+this.newInitials);
  },

  undoLastAssign() {
    this.loaders.push('on');
    this.apifetch('/api/undolastassign');
  },

  skip() {
    this.apifetch('/api/skip');
  },

  goback() {
    this.apifetch('/api/goback');
  },

  increment(type, id) {
    this.apifetch('/api/increment/'+type+'/shift/'+id);
  },

  decrement(type, id) {
    this.apifetch('/api/decrement/'+type+'/shift/'+id);
  },

  changeShiftStart(event, shift_id) {
    this.loaders.push('on');
    this.apifetch('/api/changeshiftdetails/'+event.target.value+'/'+shift_id);
  },

  resetBoard() {
    this.loaders.push('reset');
    this.apifetch('/api/resetboard');
  },

  resetTimeline() {
    this.loaders.push('reset');
    this.apifetch('/api/resettimeline');
  },

  async mounted() {
    const socket = io();
    socket.on('connect', () => { 
      // establish sockets to listen
      socket.on('new state', (state) => {
        this.handleState(state);
      });

      // fire off first event after socket set up
      this.apifetch('/api');
    });
  },

}).mount();

</script>
